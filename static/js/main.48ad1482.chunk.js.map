{"version":3,"sources":["Components/UdacTable.js","Components/AddUdac.js","Components/Udacs.js","Components/Preview.js","firebase.js","App.js","serviceWorker.js","index.js","cover2.svg"],"names":["UdacTable","_ref","udaclist","deleteUdac","updateUdac","react_default","a","createElement","Table","hover","responsive","bordered","size","length","map","udac","index","key","id","name","Button","onClick","variant","className","colSpan","AddUdac","props","Form","onSubmit","e","preventDefault","udacName","target","formUdacName","value","udaclink","formImageLink","link","addUdac","alert","Group","controlId","Label","Control","type","placeholder","Udacs","udacs","imagePreview","DropdownButton","title","onSelect","evt","Dropdown","Item","eventKey","Preview","Card","Body","Title","includes","Img","src","Image","Cover","fluid","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","_useState","useState","_useState2","Object","slicedToArray","setUdacs","useEffect","unsubscribe","firestore","collection","onSnapshot","snapshot","newUdacs","docs","doc","objectSpread","data","useUdacs","_useState3","_useState4","preview","setPreview","_useState5","_useState6","showLogin","setshowLogin","_useState7","_useState8","adminMode","setadminMode","_useState9","_useState10","adminCredentials","setaadminCredentials","handleClose","Container","Row","Col","md","Badge","Modal","show","onHide","Header","closeButton","userName","password","formUsername","formPassword","trim","xs","Components_AddUdac","add","Components_UdacTable","delete","Components_Udacs","filter","Components_Preview","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"+KA8CeA,SA1CG,SAAAC,GAAwC,IAAtCC,EAAsCD,EAAtCC,SAAUC,EAA4BF,EAA5BE,WAAYC,EAAgBH,EAAhBG,WAExC,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,OAAK,EAACC,YAAU,EAACC,UAAQ,EAACC,KAAK,MACpCP,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,eACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,uBAGJF,EAAAC,EAAAC,cAAA,aAEEL,EAASW,OAAS,EAChBX,EAASY,IAAI,SAACC,EAAMC,GAAP,OACbX,EAAAC,EAAAC,cAAA,MAAIU,IAAKF,EAAKG,IACZb,EAAAC,EAAAC,cAAA,UAAMS,EAAQ,GACdX,EAAAC,EAAAC,cAAA,UAAMQ,EAAKI,MACXd,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACa,EAAA,EAAD,CACEC,QAAS,kBAAKjB,EAAWW,EAAKG,KAC9BI,QAAQ,QAAQC,UAAU,YAAYX,KAAK,MAF7C,0BAKAP,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAQC,QAAS,kBAAMlB,EAAWY,EAAKG,KACrCI,QAAQ,QAAQC,UAAU,cAAcX,KAAK,MAD/C,cAOJP,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,MAAIiB,QAAS,GAAb,0BCcKC,EA9CC,SAACC,GAwBjB,OACIrB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAMC,SAxBF,SAACC,GACTA,EAAEC,iBACF,IAAIC,EAAWF,EAAEG,OAAOC,aAAaC,MACjCC,EAAWN,EAAEG,OAAOI,cAAcF,MAEtC,GAAgB,KAAbH,GAAgC,KAAbI,EAAgB,CAElC,IAAIpB,EAAM,CACNI,KAAMY,EACNM,KAAMF,GAGVT,EAAMY,QAAQvB,GACdc,EAAEG,OAAOC,aAAaC,MAAQ,GAC9BL,EAAEG,OAAOI,cAAcF,MAAQ,QAG/BK,MAAM,8BAQFlC,EAAAC,EAAAC,cAACoB,EAAA,EAAKa,MAAN,CAAYC,UAAU,gBAClBpC,EAAAC,EAAAC,cAACoB,EAAA,EAAKe,MAAN,kBACArC,EAAAC,EAAAC,cAACoB,EAAA,EAAKgB,QAAN,CAAcC,KAAK,OAAOC,YAAY,qBAG1CxC,EAAAC,EAAAC,cAACoB,EAAA,EAAKa,MAAN,CAAYC,UAAU,iBAClBpC,EAAAC,EAAAC,cAACoB,EAAA,EAAKe,MAAN,mBACArC,EAAAC,EAAAC,cAACoB,EAAA,EAAKgB,QAAN,CAAcC,KAAK,OAAOC,YAAY,sBAG1CxC,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAQE,QAAQ,UAAUsB,KAAK,UAA/B,8BCfGE,EAtBD,SAAA7C,GAA2B,IAAzB8C,EAAyB9C,EAAzB8C,MAAOC,EAAkB/C,EAAlB+C,aAErB,OACM3C,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAgB/B,GAAG,wBAAyBgC,MAAM,qBAAqBC,SAAU,SAACC,GAAD,OAASJ,EAAaI,KAEnGL,EAAMlC,OAAS,EACXkC,EAAMjC,IAAK,SAAAC,GAAI,OACXV,EAAAC,EAAAC,cAAC8C,EAAA,EAASC,KAAV,CAAerC,IAAKF,EAAKG,GAAIqC,SAAUxC,EAAKG,IAAKH,EAAKI,QAG1Dd,EAAAC,EAAAC,cAAA,2DCgBLiD,EA7BC,SAAAvD,GAAY,IAAVoC,EAAUpC,EAAVoC,KAEhB,OACMhC,EAAAC,EAAAC,cAAA,WAEQ8B,EAAKxB,OAAS,EACVR,EAAAC,EAAAC,cAACkD,EAAA,EAAD,KACIpD,EAAAC,EAAAC,cAACkD,EAAA,EAAKC,KAAN,KACArD,EAAAC,EAAAC,cAACkD,EAAA,EAAKE,MAAN,CAAYpC,UAAU,eACdlB,EAAAC,EAAAC,cAAA,UAAK8B,EAAK,GAAGlB,QAIjBkB,EAAK,GAAGA,KAAKuB,SAAS,SAClBvD,EAAAC,EAAAC,cAACkD,EAAA,EAAKI,IAAN,CAAUvC,QAAQ,SAASwC,IAAKzB,EAAK,GAAGA,OAExChC,EAAAC,EAAAC,cAAA,KAAGgB,UAAU,8BAAb,oDAMhBlB,EAAAC,EAAAC,cAACwD,EAAA,EAAD,CAAOD,IAAKE,IAAOC,OAAK,yECbxCC,IAASC,cAVc,CACrBC,OAAQ,0CACRC,WAAY,4BACZC,YAAa,mCACbC,UAAW,YACXC,cAAe,GACfC,kBAAmB,cACnBC,MAAO,uCAKMR,QAAf,ECiBA,IAiKeS,EAjKH,WAEV,IAAM5B,EAzBR,WAAoB,IAAA6B,EACQC,mBAAS,IADjBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACX7B,EADW+B,EAAA,GACJG,EADIH,EAAA,GAmBlB,OAfAI,oBAAU,WACR,IAAMC,EAAcjB,EACjBkB,YACAC,WAAW,SACXC,WAAW,SAACC,GACX,IAAMC,EAAWD,EAASE,KAAK3E,IAAI,SAAC4E,GAAD,OAAAX,OAAAY,EAAA,EAAAZ,CAAA,CACjC7D,GAAIwE,EAAIxE,IACLwE,EAAIE,UAETX,EAASO,KAGX,OAAO,kBAAML,MACd,IAEIpC,EAMO8C,GAFEC,EAGcjB,mBAAS,IAHvBkB,EAAAhB,OAAAC,EAAA,EAAAD,CAAAe,EAAA,GAGTE,EAHSD,EAAA,GAGAE,EAHAF,EAAA,GAAAG,EAIkBrB,oBAAS,GAJ3BsB,EAAApB,OAAAC,EAAA,EAAAD,CAAAmB,EAAA,GAITE,EAJSD,EAAA,GAIEE,EAJFF,EAAA,GAAAG,EAKkBzB,oBAAS,GAL3B0B,EAAAxB,OAAAC,EAAA,EAAAD,CAAAuB,EAAA,GAKTE,EALSD,EAAA,GAKEE,EALFF,EAAA,GAAAG,EAMiC7B,mBAAS,IAN1C8B,EAAA5B,OAAAC,EAAA,EAAAD,CAAA2B,EAAA,GAMTE,EANSD,EAAA,GAMSE,EANTF,EAAA,GAQVG,EAAc,kBAAMT,GAAa,IAoDvC,OACEhG,EAAAC,EAAAC,cAACwG,EAAA,EAAD,CAAWxF,UAAU,OACnBlB,EAAAC,EAAAC,cAACyG,EAAA,EAAD,KACE3G,EAAAC,EAAAC,cAAC0G,EAAA,EAAD,CAAKC,GAAI,IACP7G,EAAAC,EAAAC,cAAA,MAAIgB,UAAU,mBAAkBlB,EAAAC,EAAAC,cAAA,QAAMgB,UAAU,qBAAhB,QAAhC,SACEiF,EACEnG,EAAAC,EAAAC,cAAC4G,EAAA,EAAD,CAAO7F,QAAQ,aAAf,SAEA,KAMNjB,EAAAC,EAAAC,cAAC0G,EAAA,EAAD,CAAKC,GAAI,GAELV,EACEnG,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAQE,QAAQ,oBAAoBD,QAlD3B,WACnBoF,GAAa,IAiDwD7F,KAAK,MAAhE,UAIAP,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAQE,QAAQ,gBAAgBD,QAxEzB,kBAAMgF,GAAa,IAwE2BzF,KAAK,MAA1D,SAOJP,EAAAC,EAAAC,cAAC6G,EAAA,EAAD,CAAOC,KAAMjB,EAAWkB,OAAQR,GAC9BzG,EAAAC,EAAAC,cAAC6G,EAAA,EAAMG,OAAP,CAAcC,aAAW,GACvBnH,EAAAC,EAAAC,cAAC6G,EAAA,EAAMzD,MAAP,eAEFtD,EAAAC,EAAAC,cAAC6G,EAAA,EAAM1D,KAAP,KACArD,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAMC,SAnFI,SAACC,GACnBA,EAAEC,iBACF+E,EAAqB,CACnBY,SAAU,QACVC,SAAU,qBAEZ,IAAID,EAAW5F,EAAEG,OAAO2F,aAAazF,MACjCwF,EAAW7F,EAAEG,OAAO4F,aAAa1F,MAClCuF,EAASI,SAAWjB,EAAiBa,UAAYC,EAASG,SAAWjB,EAAiBc,UACvFnF,MAAM,uBACNuE,IACAL,GAAa,IAEblE,MAAM,8BAuEElC,EAAAC,EAAAC,cAACoB,EAAA,EAAKa,MAAN,CAAYC,UAAU,gBACpBpC,EAAAC,EAAAC,cAACoB,EAAA,EAAKe,MAAN,iBACArC,EAAAC,EAAAC,cAACoB,EAAA,EAAKgB,QAAN,CAAcC,KAAK,OAAOC,YAAY,oBAGxCxC,EAAAC,EAAAC,cAACoB,EAAA,EAAKa,MAAN,CAAYC,UAAU,gBACpBpC,EAAAC,EAAAC,cAACoB,EAAA,EAAKe,MAAN,iBACArC,EAAAC,EAAAC,cAACoB,EAAA,EAAKgB,QAAN,CAAcC,KAAK,WAAWC,YAAY,cAE5CxC,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAQE,QAAQ,UAAUsB,KAAK,UAA/B,eAWRvC,EAAAC,EAAAC,cAAA,WAEEiG,EACEnG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyG,EAAA,EAAD,KACE3G,EAAAC,EAAAC,cAAC0G,EAAA,EAAD,CAAKC,GAAI,EAAGY,GAAI,IACdzH,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,cACblB,EAAAC,EAAAC,cAAA,MAAIgB,UAAU,kBAAd,iBACAlB,EAAAC,EAAAC,cAACwH,EAAD,CAAazF,QA3Fb,SAAAvB,GAGdmD,EACGkB,YACAC,WAAW,SACX2C,IAAIjH,QAwFGV,EAAAC,EAAAC,cAAC0G,EAAA,EAAD,CAAKC,GAAI,EAAGY,GAAI,IAChBzH,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,cACblB,EAAAC,EAAAC,cAAA,MAAIgB,UAAU,kBAAd,aACAlB,EAAAC,EAAAC,cAAC0H,EAAD,CAAW/H,SAAU6C,EAAO5C,WAxFvB,SAAAe,GAIfgD,EACCkB,YACAC,WAAW,SACXK,IAAIxE,GACJgH,UAgF6D9H,WA7E/C,SAAAc,GACjBqB,MAAM,kCAiFElC,EAAAC,EAAAC,cAAA,YAGF,GAKJF,EAAAC,EAAAC,cAACyG,EAAA,EAAD,KACE3G,EAAAC,EAAAC,cAAC0G,EAAA,EAAD,CAAKa,GAAI,GAAIZ,GAAI,IACb7G,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,qBACblB,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,8BACblB,EAAAC,EAAAC,cAAA,MAAIgB,UAAU,mBAAd,0BACAlB,EAAAC,EAAAC,cAAC4H,EAAD,CAAOpF,MAAOA,EAAOC,aA3Fd,SAAA9B,GACnB+E,EAAWlD,EAAMqF,OAAO,SAAArH,GAAI,OAC1BA,EAAKG,IAAMA,SA2FHb,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,gBACblB,EAAAC,EAAAC,cAAC8H,EAAD,CAAchG,KAAM2D,UCzKhBsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvI,EAAAC,EAAAC,cAACsI,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,wDEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.48ad1482.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Button, Table } from 'react-bootstrap';\r\nimport '../App.css';\r\n\r\nconst UdacTable = ({udaclist, deleteUdac, updateUdac}) => { \r\n\r\n  return(\r\n    <Table hover responsive bordered size=\"md\">\r\n      <thead>\r\n        <tr>\r\n          <th>#</th>\r\n          <th>Name</th>\r\n          <th>Actions</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n      {\r\n        udaclist.length > 0 ? (\r\n          udaclist.map((udac, index) => (\r\n          <tr key={udac.id}>\r\n            <td >{index + 1}</td>\r\n            <td >{udac.name}</td>\r\n            <td>\r\n              <Button \r\n                onClick={()=> updateUdac(udac.id)}\r\n                variant=\"light\" className=\"text-info\" size=\"sm\">Edit (Not yet working)\r\n              </Button>\r\n              \r\n              <Button onClick={() => deleteUdac(udac.id)} \r\n                variant=\"light\" className=\"text-danger\" size=\"sm\" >Delete\r\n              </Button>\r\n            </td>\r\n          </tr>\r\n        ))\r\n        ) : (\r\n          <tr>\r\n          <td colSpan={3}>No udacs</td>\r\n        </tr>\r\n        )\r\n      }\r\n        \r\n      </tbody>\r\n    </Table>\r\n    )\r\n  }\r\n\r\nexport default UdacTable","import React from 'react'\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport '../App.css';\r\n\r\nconst AddUdac = (props) => {\r\n\r\nconst Add = (e) => {\r\n    e.preventDefault();\r\n    let udacName = e.target.formUdacName.value\r\n    let udaclink = e.target.formImageLink.value\r\n\r\n    if(udacName !== '' && udaclink !== ''){\r\n\r\n        let udac ={\r\n            name: udacName, \r\n            link: udaclink \r\n        }\r\n\r\n        props.addUdac(udac);\r\n        e.target.formUdacName.value = \"\"\r\n        e.target.formImageLink.value = \"\"\r\n    }\r\n    else{\r\n        alert('Put some values damn it!')\r\n    }\r\n    \r\n}\r\n\r\nreturn (\r\n    <div>\r\n        <Form onSubmit={Add}>\r\n            <Form.Group controlId=\"formUdacName\">\r\n                <Form.Label>Udac Name</Form.Label>\r\n                <Form.Control type=\"text\" placeholder=\"Enter udac name\" />\r\n            </Form.Group>\r\n           \r\n            <Form.Group controlId=\"formImageLink\">\r\n                <Form.Label>Image Link</Form.Label>\r\n                <Form.Control type=\"text\" placeholder=\"Enter image link\" />\r\n            </Form.Group>\r\n           \r\n            <Button variant=\"primary\" type=\"submit\">\r\n                Submit\r\n            </Button>\r\n        </Form>\r\n    </div>\r\n)\r\n\r\n} \r\n\r\nexport default AddUdac","import React from 'react'\r\nimport { DropdownButton, Dropdown} from 'react-bootstrap';\r\nimport '../App.css';\r\n\r\nconst Udacs = ({udacs, imagePreview}) => { \r\n\r\n  return(\r\n        <div >\r\n            <br></br>\r\n            \r\n            <DropdownButton id=\"dropdown-basic-button\"  title=\"Please Choose Udac\" onSelect={(evt) => imagePreview(evt)}>\r\n            {\r\n                udacs.length > 0 ? (\r\n                    udacs.map( udac => (\r\n                        <Dropdown.Item key={udac.id} eventKey={udac.id}>{udac.name}</Dropdown.Item>\r\n                    ))\r\n                ) : (\r\n                    <p>No Udacs</p>\r\n                )\r\n            }\r\n            </DropdownButton>\r\n         </div>\r\n\r\n    )\r\n  }\r\n\r\nexport default Udacs","import React from 'react'\r\nimport {  Image, Card} from 'react-bootstrap';\r\nimport '../App.css';\r\nimport Cover from '../cover2.svg'\r\nconst Preview = ({link}) => { \r\n\r\n  return(\r\n        <div>\r\n            {\r\n                link.length > 0 ? (\r\n                    <Card>\r\n                        <Card.Body>\r\n                        <Card.Title className=\"text-center\">\r\n                                <h4>{link[0].name}</h4>\r\n                        </Card.Title>\r\n                        </Card.Body>\r\n                        {\r\n                            link[0].link.includes(\"https\") ? (\r\n                                <Card.Img variant=\"bottom\" src={link[0].link} />\r\n                            ) : (\r\n                                <p className=\"text-center text-secondary\">Preview not available or link might not working</p>\r\n                            )\r\n                        }\r\n                        \r\n                    </Card>\r\n                ) :\r\n                <Image src={Cover} fluid />\r\n            }\r\n        </div>\r\n\r\n    )\r\n  }\r\n\r\nexport default Preview","import firebase from 'firebase/app';\r\nimport 'firebase/firestore'\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAWPJu22l5s8wKUxWul0GvO1LEN8h2cKKQ\",\r\n  authDomain: \"udac-lore.firebaseapp.com\",\r\n  databaseURL: \"https://udac-lore.firebaseio.com\",\r\n  projectId: \"udac-lore\",\r\n  storageBucket: \"\",\r\n  messagingSenderId: \"50825490719\",\r\n  appId: \"1:50825490719:web:0112aed5cc3db3fd\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase","import React, { useState, useEffect } from 'react';\r\nimport UdacTable from './Components/UdacTable';\r\nimport AddUdacForm from './Components/AddUdac';\r\nimport Udacs from './Components/Udacs';\r\nimport ImagePreview from './Components/Preview';\r\nimport { Container, Row, Col, Button, Badge, Modal, Form } from 'react-bootstrap';\r\nimport firebase from './firebase';\r\nimport './App.css';\r\n\r\nfunction useUdacs() {\r\n  const [udacs, setUdacs] = useState([])\r\n  \r\n\r\n  useEffect(() => {\r\n    const unsubscribe = firebase\r\n      .firestore()\r\n      .collection('udacs')\r\n      .onSnapshot((snapshot) => {\r\n        const newUdacs = snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          ...doc.data()\r\n        }))\r\n        setUdacs(newUdacs)\r\n      })\r\n\r\n      return () => unsubscribe()\r\n  }, [])\r\n\r\n  return udacs\r\n}\r\n\r\n\r\nconst App = () => {\r\n\r\n  const udacs = useUdacs()\r\n  const [preview, setPreview] = useState([])\r\n  const [showLogin, setshowLogin] = useState(false)\r\n  const [adminMode, setadminMode] = useState(false)\r\n  const [adminCredentials, setaadminCredentials] = useState({})\r\n\r\n  const handleClose = () => setshowLogin(false)\r\n  const handleShow = () => setshowLogin(true)\r\n  const handleLogin = (e) => {\r\n    e.preventDefault()\r\n    setaadminCredentials({\r\n      userName: \"admin\",\r\n      password: \"!udacloreadmiN01\"\r\n    })\r\n    let userName = e.target.formUsername.value\r\n    let password = e.target.formPassword.value\r\n    if(userName.trim() === adminCredentials.userName && password.trim() === adminCredentials.password){\r\n      alert(\"Nice! Login Success\")\r\n      handleClose()\r\n      setadminMode(true)\r\n    } else{\r\n      alert(\"Wrong Password! Damn it!\")\r\n    }\r\n    \r\n  }\r\n  const handleLogout = () => {\r\n    setadminMode(false)\r\n  }\r\n\r\n  const addUdac = udac => {\r\n    //udac.id = udacs.length + 1\r\n    //setUdacs([...udacs, udac])\r\n    firebase\r\n      .firestore()\r\n      .collection('udacs')\r\n      .add(udac)\r\n  }\r\n\r\n  const deleteUdac = id => {\r\n    //setUdacs(\r\n      //udacs.filter(udac => \r\n      //  udac.id !== id))\r\n      firebase\r\n      .firestore()\r\n      .collection('udacs')\r\n      .doc(id)\r\n      .delete()\r\n  }\r\n\r\n  const updateUdac = id => {\r\n    alert('not yet working damn it!')\r\n  }\r\n\r\n  const imagePreview = id => {\r\n    setPreview(udacs.filter(udac => \r\n      udac.id == id))\r\n  }\r\n\r\n  return (\r\n    <Container className=\"App\">\r\n      <Row >\r\n        <Col md={11}>\r\n          <h3 className=\"text-secondary \"><span className=\"text-primary logo\">Udac</span> Lore {\r\n            adminMode ? (\r\n              <Badge variant=\"secondary\">Admin</Badge>\r\n            ) :(\r\n              ''\r\n            )\r\n          }\r\n          </h3>\r\n          \r\n        </Col>\r\n        <Col md={1}>\r\n          {\r\n            adminMode ? (\r\n              <Button variant=\"outline-secondary\" onClick={handleLogout} size=\"sm\">\r\n              Logout\r\n            </Button>\r\n            ) : (\r\n              <Button variant=\"outline-light\" onClick={handleShow} size=\"sm\">\r\n                Login\r\n              </Button>\r\n            )\r\n          }\r\n          \r\n\r\n          <Modal show={showLogin} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Login</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n            <Form onSubmit={handleLogin}>\r\n              <Form.Group controlId=\"formUsername\">\r\n                <Form.Label>Username</Form.Label>\r\n                <Form.Control type=\"text\" placeholder=\"Enter username\" />\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"formPassword\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control type=\"password\" placeholder=\"Password\" />\r\n              </Form.Group>\r\n              <Button variant=\"primary\" type=\"submit\">\r\n                Submit\r\n              </Button>\r\n            </Form>\r\n\r\n            </Modal.Body>\r\n          </Modal>\r\n\r\n        </Col>\r\n        \r\n      </Row>\r\n      <hr></hr>\r\n      {\r\n        adminMode ?  (\r\n          <div>\r\n            <Row>\r\n              <Col md={4} xs={12}>\r\n                <div className=\"flex-large\">\r\n                  <h4 className=\"text-secondary\">Add Udac here</h4> \r\n                  <AddUdacForm addUdac={addUdac}/>\r\n                </div>\r\n              </Col>\r\n              <Col md={8} xs={12}>\r\n              <div className=\"flex-large\">\r\n                <h4 className=\"text-secondary\">UDAC List</h4>\r\n                <UdacTable udaclist={udacs} deleteUdac={deleteUdac} updateUdac={updateUdac}/>\r\n              </div>\r\n              </Col>\r\n              \r\n            </Row>\r\n            <hr></hr>\r\n          </div>\r\n        ) : (\r\n          ''\r\n        )\r\n      }\r\n      \r\n     \r\n      <Row>\r\n        <Col xs={12} md={12}>\r\n            <div className=\"preview-container\">\r\n              <div className=\"preview-header text-center\">\r\n                <h4 className=\"text-secondary \">Learn any UDAC anytime</h4>\r\n                <Udacs udacs={udacs} imagePreview={imagePreview}/>\r\n              </div>\r\n              <div className=\"preview-body\">\r\n                <ImagePreview link={preview}/>\r\n              </div>\r\n            </div>\r\n        </Col>\r\n      </Row>\r\n     \r\n        \r\n      \r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/cover2.4426945d.svg\";"],"sourceRoot":""}